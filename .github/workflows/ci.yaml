name: ReSDK CI

on:
  push:
    branches:
      - master
      - arc-runners-devel # TODO: remove
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
  workflow_dispatch:

jobs:
  ecr_login:
    runs-on: ubuntu-latest
    outputs:
      ecr_password: ${{ steps.retrieve_password.outputs.ecr_password }}
    steps:
      - name: Set up AWS CLI
        uses: chrislennon/action-aws-cli@1.1
      - name: Retrieve ECR password
        id: retrieve_password
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: echo "ecr_password=$(aws ecr get-login-password)" >> $GITHUB_OUTPUT

  unittest:
    needs: ecr_login
    runs-on: arc-runner
    env:
      TOX_COMMAND: "python3.12 -m tox --skip-missing-interpreters false"

    container:
      image: 342286153875.dkr.ecr.us-east-1.amazonaws.com/genialis/ci/arc-runner:latest
      credentials:
        username: AWS
        password: ${{ needs.ecr_login.outputs.ecr_password }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: py38
        # toxenv: [py39, py310, py311, py312, docs, linters, package]
        toxenv: [py312]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Assert PR is up-to-date
        if: github.event_name == 'pull_request'
        run: |
          git_change_target_merge_base=$(git merge-base HEAD origin/${{ github.base_ref }})
          git_change_target_sha=$(git rev-parse origin/${{ github.base_ref }})

          if [[ "${git_change_target_merge_base}" != "${git_change_target_sha}" ]]; then
            echo "Pull request is not up-to-date!"
            echo "Please, rebase your pull request on top of '${{ github.base_ref }}' (commit: ${git_change_target_sha})."
            exit 1
          fi

      - name: Run Tests
        run: >
          ${{ env.TOX_COMMAND }} -e ${{ matrix.toxenv }}

  e2e:
    runs-on: arc-runner
    # needs: [unittest, ecr_login]
    needs: ecr_login
    env:
      TOX_COMMAND: "python3.12 -m tox --skip-missing-interpreters false"
      TOXENV: py310-e2e-resdk
      WORKDIR: "/home/runner/_work/resolwe-bio-py/resolwe-bio-py"

    container:
      image: 342286153875.dkr.ecr.us-east-1.amazonaws.com/genialis/ci/arc-runner:latest
      options: --hostname resdk
      volumes:
        - /run/docker:/var/run/docker
        # Process executors must mount certain volumes, so the directories must be shared on the host.
        - /tmp:/tmp
        - /home/runner/_work:/home/runner/_work
      env:
        DOCKER_HOST: unix:///run/docker/docker.sock
        GENESIS_POSTGRESQL_NAME: resolwe-genialis
        GENESIS_POSTGRESQL_USER: genialis-base
        GENESIS_POSTGRESQL_HOST: postgres
        GENESIS_POSTGRESQL_PORT: 5432
        GENESIS_ES_PORT: 59210
        GENESIS_REDIS_HOST: redis
        GENESIS_REDIS_PORT: 6379
        GENESIS_RESDK_PATH: ${{ env.WORKDIR }}
        GENESIS_REST_THROTTLING: '{"login": "100000/hour", "credentials": "100000/hour", "email": "100000/hour"}'
      credentials:
        username: AWS
        password: ${{ needs.ecr_login.outputs.ecr_password }}

    steps:
      - name: Checkout resolwe-bio-py
        uses: actions/checkout@v4

      - name: Checkout genialis-base
        uses: actions/checkout@v4
        with:
          repository: genialis/genialis-base
          path: ${{ env.WORKDIR }}/genialis-base

      - name: Set up environment
        run: |
          pwd
          mkdir -p frontend/genjs/schema
          echo '{}' > frontend/genjs/schema/configuration.json

      - name: Run tests
        run: |
          cd /home/runner/_work/genialis-base
          pwd
          ls -la
          ${{ env.TOX_COMMAND }} -e ${{ env.TOXENV }}

  build:
    runs-on: arc-runner
    needs: [unittest, e2e, ecr_login]
    if: startsWith(github.ref, 'refs/tags')
    env:
      PYTHON: "python3.12"
    container:
      image: 342286153875.dkr.ecr.us-east-1.amazonaws.com/genialis/ci/arc-runner:latest
      credentials:
        username: AWS
        password: ${{ needs.ecr_login.outputs.ecr_password }}

    steps:
      - uses: actions/checkout@v4

      - name: Install build
        run: ${{ env.PYTHON }} -m pip install --user build

      - name: Build a binary wheel and a source tarball
        run: ${{ env.PYTHON }} -m build --sdist --wheel --outdir dist/ .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: .coverage

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.8
        with:
          password: ${{ secrets.pypi_password }}

